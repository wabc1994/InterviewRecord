# 背景


在前面的文章中我们讲述了创建线程的2种方式，一种是直接继承Thread，另外一种就是实现Runnable接口。

这2种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。比如在

Executor框架使用Runnable作为其基本的任务表示形式。Runnable是一种有很大局限的抽象，它不能返回一个值或抛出一个受检查的异常。


Runnable的定义如下
```java
public interface Runnable {
    public abstract void run();
}
```

由于run()方法返回值为void类型，所以在执行完任务之后无法返回任何结果。

如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。

而自从Java 1.5开始，就提供了Callable和Future，通过它们可以在任务执行完毕之后得到任务执行结果。

Future就是对线程任务执行结果进行一定的操作相关的接口


# Callable与Runnable
相同点
> Runnable和Callable描述的都是抽象的计算任务。这些任务通常是有生命周期的。Exe

- The callable interface was introduced in concurrency package, which is similar to the Runnable interface, but it can return any object, and is able to throw an Exception.

- The Java Callable interface uses Generics, so it can return any type of Object

与Runnable 不一样的是：
 -  Callable有返回结果
 -  Callable 是泛型
 -  Callable 有异常处理

 **使用情况**
 
既然Callable是线程，如何使用该线程，主要是配合线程池使用Executor.线程池类
Future 对象 = 线程池.submit(提交线程任务Callable)

- <T> Future<T> submit(Callable<T> task);
- Future<?> submit(Runnable task);

　暂时只需要知道Callable一般是和ExecutorService配合来使用的，ExecutorService继承自Executor，它的目的是为我们管理Thread对象，从而简化并发编程，Executor使我们无需显示的去管理线程的生命周期


#  Future

 **设计目标**
 获取异步调用结果（副线程需要执行一些结果，主线程需要知道这个结果是怎样的情况）

Future类位于java.util.concurrent包下，它是一个接口：

```java
public interface Future<V> {
    boolean cancel(boolean mayInterruptIfRunning);
    boolean isCancelled();
    boolean isDone();
    V get() throws InterruptedException, ExecutionException;
    V get(long timeout, TimeUnit unit)
        throws InterruptedException, ExecutionException, TimeoutException;
}
```

在Future接口中声明了5个方法，下面依次解释每个方法的作用：

- cancel方法用来取消任务，如果取消任务成功则返回true，如果取消任务失败则返回false。参数mayInterruptIfRunning表示是否允许取消正在执行却没有执行完毕的任务，如果设置true，则表示可以取消正在执行过程中的任务。如果任务已经完成，则无论mayInterruptIfRunning为true还是false，此方法肯定返回false，即如果取消已经完成的任务会返回false；如果任务正在执行，若mayInterruptIfRunning设置为true，则返回true，若mayInterruptIfRunning设置为false，则返回false；如果任务还没有执行，则无论mayInterruptIfRunning为true还是false，肯定返回true。

- isCancelled方法表示任务是否被取消成功，如果在任务正常完成前被取消成功，则返回 true。

- isDone方法表示任务是否已经完成，若任务完成，则返回true；

- get()方法用来获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回；

- get(long timeout, TimeUnit unit)用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null。

也就是说Future提供了三种功能：

1. 判断任务是否完成；
2. 能够中断任务；
3. 能够获取任务执行结果。


# FutureTask
Future只是一个接口，无法直接创建对象，因此有了FutureTask。

我们先来看下FutureTask的实现：
```java
public class FutureTask<V> implements RunnableFuture<V>
```

FutureTask类实现了RunnableFuture接口,RunnableFuture 继承了了Runnable和Future接口，而FutureTask 实现了RunnableFuture 接口
```java
public interface RunnableFuture<V> extends Runnable, Future<V> {
    void run();
}
```

# Callable与Future

Callable与Runnable一样是线程， 去做一件事情， Callable返回的就是Future Object对象，两者结合使用

> Callable和Future，它俩很有意思的，一个产生结果，一个拿到结果




而 Future 是object, 是一个实体

[参考文献一](https://www.cnblogs.com/dolphin0520/p/3949310.html)

[参考文献二](https://blog.csdn.net/codershamo/article/details/51901057)

主要是查看这篇文献即可

